name: cicd-4
on:
  push:
    tags:
      - v*.*.*
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev, master]

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

  set-environment:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.ref_type == 'tag'
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: set env
        id: set-env
        run: |
          if [[ ${{ github.ref_type == 'tag' ]]
          then
            echo environment=qa >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ ${{ github.ref_type == 'branch' ]]
          then
            echo environment=dev >> $GITHUB_OUTPUT
            if [[ ${{ github.base_ref == 'master' ]]
            then
              echo environment=staging >> $GITHUB_OUTPUT
            fi
          fi

  image-build:
    runs-on: ubuntu-latest
    needs: set-environment
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

  deploy:
    runs-on: ubuntu-latest
    needs: [set-environment, image-build]
    strategy:
      matrix:
        environment: ${{ needs.set-environment.outputs.environment }}
    environment: ${{ matrix.environment }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: checkout
        uses: actions/checkout@v4

  create-pr:
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    if: needs.set-environment.outputs.environment == 'qa'
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: create branch
        run: |
          git checkout -b release/${{ github.ref_name }}
          git push origin release/${{ github.ref_name }}
      - name: create pr
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          gh pr create --base master --head release/${{github.ref_name }} --title "release/${{github.ref_name }} -> master" \
          --body "release pr"

  approve:
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    if: needs.set-environment.outputs.environment == 'staging'
    environment: approve-process
    steps:
      - name: approve
        run: echo "Approve done"

  prod-deploy:
    runs-on: ubuntu-latest
    needs: approve
    strategy:
      matrix:
        environment: ["prod"]
    environment: ${{ matrix.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v4